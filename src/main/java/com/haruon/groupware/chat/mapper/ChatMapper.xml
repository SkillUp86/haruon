<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.haruon.groupware.chat.mapper.ChatMapper">
	<!-- 채팅방 생성 -->
	<insert id="insertRoomJoin" parameterType="com.haruon.groupware.chat.entity.ChatRoom">
		INSERT INTO chat_room(
			room_id, emp_no
		) VALUES (
			#{roomId}, #{empNo}
		)	
	</insert>
	
	<!-- 로그인한 사원이 참여하고 있는 채팅방 정보 호출 : 채팅내역이 있어야 출력됨-->
	<select id="getChatRoomsInfoByEmp" parameterType="Integer" resultType="com.haruon.groupware.chat.dto.ChatRoomDTO">
		SELECT e.emp_no empNo 			    , e.ename ename
			 , d.dname dname				, cc.common_code connectionStatus
			 , ef.file_name fileName	    , ef.ext ext
			 , V1.roomId roomId			    , V1.sendTime sendTime
			 , V1.message message			, V1.senderNo senderNo
	FROM emp e
	INNER JOIN dept d ON d.dep_no = e.dep_no
	INNER JOIN common_code cc ON cc.common_code = e.connection_status AND cc.parent_code = (SELECT common_code FROM common_code WHERE descript = 'emp_connection_status')
	INNER JOIN chat_room cr ON cr.emp_no = e.emp_no 
	LEFT OUTER JOIN emp_file ef ON ef.emp_no = e.emp_no
	INNER JOIN (SELECT V0.roomId roomId		, V0.sendTime sendTime
					 , V0.message message	, V0.senderNo senderNo
				  FROM (SELECT c.room_id roomId		, c.send_time sendTime
						     , c.message message	, cr.emp_no empNo	, c.sender_no senderNo
							 , ROW_NUMBER() OVER(PARTITION BY c.room_id ORDER BY c.send_time desc) AS recentNumber
							FROM chat_room cr JOIN chat c ON c.room_id = cr.room_id
							WHERE cr.room_id IN (SELECT room_id 
											  		     FROM chat_room WHERE emp_no = #{empNo})) V0
				 WHERE V0.recentNumber = 1) V1
					ON V1.roomId = cr.room_id
	     WHERE e.emp_no != #{empNo}
	</select>
	
	<!-- 특정 Room의 채팅 상대방의 이름, 사진(확장자), 연결상태 -->
	<select id="getOtherParticipant" parameterType="com.haruon.groupware.chat.entity.ChatRoom" resultType="com.haruon.groupware.chat.dto.ChatRoomDTO">
		   	 SELECT e.ename ename
		          , e.connection_status connectionStatus
		          , ef.file_name fileName
		          , ef.ext ext
		   	   FROM emp e
		 INNER JOIN chat_room cr ON cr.emp_no = e.emp_no
	LEFT OUTER JOIN emp_file ef ON e.emp_no = ef.emp_no
			  WHERE cr.room_id = #{roomId} AND e.emp_no != #{empNo};
	</select>
	
	<!-- 특정 room의 이전 대화 내역 -->
	<select id="getChatConversation" parameterType="String" resultType="com.haruon.groupware.chat.dto.ChatRoomDTO">
		SELECT DISTINCT c.sender_no senderNo
		     , c.send_time sendTime
			 , c.message message
	 	  FROM chat_room cr 
	INNER JOIN chat c ON c.room_id = cr.room_id
	 	 WHERE cr.room_id = #{roomId}
	 	 ORDER BY sendTime;
	</select>

	<!-- 채팅방 찾기  -->
	<select id="findChatRoom" resultType="String" parameterType="String">
		SELECT DISTINCT room_id roomId
				   FROM chat_room
				  WHERE room_id = #{roomId}
	</select>
	
	<!-- 채팅방에 입장하고자 하는 사원이 있는지 확인  -->
	<select id="checkParticipation" resultType="Integer" parameterType="com.haruon.groupware.chat.entity.ChatRoom">
		SELECT COUNT(emp_no) roomId
		  from chat_room
		 where room_id = #{roomId} AND emp_no= #{empNo}
	</select>
	
	<!-- 채팅 내역 추가 -->
	<select id="insertChat" parameterType="com.haruon.groupware.chat.entity.Chat">
		INSERT INTO chat(
			room_id, sender_no, send_time, message
		) VALUES (
			#{roomId}, #{senderNo}, #{sendTime}, #{message}
		)
	</select>
	
	<select id="findChatRoomExist" parameterType="com.haruon.groupware.chat.dto.CheckRoomDTO" resultType="String">
		SELECT r.room_id 
		  FROM (SELECT room_id, GROUP_CONCAT(emp_no) att
		       	  FROM chat_room 
		      GROUP BY room_id) r
	     WHERE r.att LIKE CONCAT(#{attendacne1}, ',', #{attendacne2}) 
		    OR r.att LIKE CONCAT(#{attendacne2}, ',', #{attendacne1})
	</select>
	
	<delete id="deleteAttendanceFromRoom" parameterType="com.haruon.groupware.chat.entity.ChatRoom">
		DELETE FROM chat_room 
		 WHERE room_id=#{roomId} AND emp_no=#{empNo}
	</delete>
</mapper>